macro_rules! test {
   ($($arg:tt)*) => println!("\n\x1b[94m{}\x1b[0m", format!($($arg)*));
}

fn test_loop() {
   test!("testing loop breaks");
   let mut i = 0;
   loop { 
      if i > 5 {
         break;
      }
      
      println!("I live. ({i})");
      i+=1;
   }
   
   test!("testing inner loop");
   'a: loop {
      'b: loop {
         break 'b;
      }
      println!("Hit \"'a\" outer loop");
      break 'a;
   }
   
   test!("testing never reached");
   'outer: loop {
      println!("Entered the outer loop");
      
      'inner: loop {
         println!("Entered the inner loop");
         break 'outer;
      }
      
      println!("This point will never be reached");
   }
}

fn test_assign() {
   test!("testing assignment");
   
   let mut a = 1;
   let mut b = 1;
   
   let result = loop {
      if b > 10 {
         break b;
      }
   
      let c = a + b;
      a = b;
      b = c;
   };
   
   println!("the result is {result}");
}

fn test_while() {
   test!("testing while val < int");
   let mut i = 0;
   while i < 10 {
      println!("ball(s) {i}"); 
      i += 1;
   }
   
   test!("testing while let with slice");
   let mut x = [1, 2, 3, 4, 5].to_slice();   
   while let Some(y) = x.pop() {
      println!("y = {}", y);
   }
   
   test!("testing while let with irrefutable");
   while let _ = 5 {
      println!("irrefutable patterns are always true");
      break;
   }
}

fn test_for() {
   test!("testing range 0..10");
   for i in 0..10 {
      println!("index: {i}");
   }
   
   test!("testing for in arr");
   let strs = ["cats", "dogs"];
   for text in strs {
      println!("I like {}.", text);
   }
   
   test!("testing range with continue");
   for i in ..10u32 {
      if i % 2 == 0 {
         continue;
      }
      println!("{i} is odd");
   }
}

fn main() {
   test_loop();
   test_assign();
   test_while();
   test_for();
}