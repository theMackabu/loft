fn analyze(slice: [i32], test: usize) {
   match test {
      1 => {
         test_eq!(slice[0], 9);
         test_eq!(slice.len(), 3);
      },
      
      2 => {
         test_eq!(slice[0], 1);
         test_eq!(slice.len(), 5);
      },
      
      3 => {
         test_eq!(slice[0], ":3");
         test_eq!(slice.len(), 20);
      },
      
      _ => test_fail!(),
   }
}

fn main() {   
   let mut s: [i32] = [1, 2, 3];
   let xs: [i32; 5] = [1, 2, 3, 4, 5];
   let ys: [&str; 500] = [":3"; 500];

   s[0] += 8;
   
   analyze(s, 1);
   analyze(xs, 2);
   analyze(ys[1..=20], 3);
   
   let val = 1;
   match xs.get(val) {
      Some(val) => test_eq!(val, 2),
      None => test_fail!(),
   }
}