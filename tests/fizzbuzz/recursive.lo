// fn fizzbuzz(n: i32) -> str {
//    if n <= 0 {
//       return "";
//    }
// 
//    let mut result = fizzbuzz(n - 1);
//       
//    if !result.is_empty() {
//       result.push("\n");
//    }
// 
//    result.push(match (n % 3, n % 5) {
//       (0, 0) => "FizzBuzz",
//       (0, _) => "Fizz",
//       (_, 0) => "Buzz",
//       (_, _) => n.as_str(),
//    });
//    
//    return result;
// }
// 
// fn main() {
//    println!("\nrecursive");
//    println!("{}", fizzbuzz(30));
// }

fn fizzbuzz(n: i32) -> String {
   let helper = |current: i32, max: i32, acc: &str| -> &str {
      if current > max {
         return acc;
      }
        
      let mut new_acc = acc;
      
      if !new_acc.is_empty() {
         new_acc.push("\n");
      }
        
      new_acc.push(match (current % 3, current % 5) {
         (0, 0) => "FizzBuzz",
         (0, _) => "Fizz",
         (_, 0) => "Buzz",
         _ => current.as_str(),
      });
        
      helper(current + 1, max, new_acc)
   };

   helper(1, n, "")
}


fn main() {
   println!("\nrecursive");
   println!("{}", fizzbuzz(30));
}